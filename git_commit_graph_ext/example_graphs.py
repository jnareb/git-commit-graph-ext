# AUTOGENERATED! DO NOT EDIT! File to edit: 03_example_graphs.ipynb (unless otherwise specified).

__all__ = ['crown_DAG', 'small_DAG_FELINE', 'tree_DAG', 'RCH_graph', 'commit_graph']

# Cell
import networkx as nx
import matplotlib.pyplot as plt


# Cell
def crown_DAG():
    """Returns crown DAG known as S_3^0 graph

    Returns
    -------
    graph : networkx.DiGraph
        Crown DAG also known as S_3^0 directed graph
    """
    DG=nx.DiGraph()
    DG.add_nodes_from([1,2,3,4,'u','v'])
    DG.add_edges_from([(1,2),(3,4),(1,'v'),(3,'v'),('u',2),('u',4)])
    return DG


# Cell
def small_DAG_FELINE():
    """Create small DAG (example in Figure 2 in FELINE paper)

    Returns
    -------
    graph : networkx.DiGraph
        Small DAG (example in Figure 2 in FELINE paper)
    """
    sd=nx.DiGraph()
    sd.add_nodes_from([chr(c) for c in range(ord('a'),ord('h')+1)])
    sd.add_edges_from([('a','c'),('a','d'),('a','e'),('b','f'),('b','g'),('c','h'),('e','h'),('f','h')])
    return sd


# Cell
def tree_DAG():
    """Create tree DAG ('didactic example' in Figure 6 in FELINE paper)

    The created tree graph has a single source node with out-degree of 3,
    its 3 out-neighbours have out-degrees, respectively, of 2, 1 and 2.
    Out-neighbours of those nodes are sink nodes with out-degree of 0.
    The tree has maximum level of 3.

    Below there is ASCII-art rendering of this graph; edges point downward

                                'a'
                              __/|\__
                             /   |   \
                           'b'  'c'  'd'
                           / \   |   / \
                          /  |   |   |  \
                        'e' 'f' 'g' 'h' 'i'

    Returns
    -------
    graph : networkx.DiGraph
        Tree DAG (example in Figure 6 in FELINE paper)
    """
    de=nx.DiGraph()
    de.add_nodes_from([chr(c) for c in range(ord('a'),ord('i')+1)])
    de.add_edges_from([('a','b'),('a','c'),('a','d'),
                       ('b','e'),('b','f'),
                       ('c','g'),
                       ('d','h'),('d','i')])
    return de

# Cell
def RCH_graph():
    """Create RCH example graph (example in Figure 1 and 2 in PReaCH paper)

    Positions of nodes in the drawing from Figure 1 and 2 in PReaCH paper
    is stored in `pos` attribute of returned graph object.

    Backard topological levels (i.e. with level equal to 0 for nodes
    with no outgoing edges, that is with out-degree of 0) are stored
    in `lvl` attribute of returned graph object.

    Returns
    -------
    graph : networkx.DiGraph
        RCH example DAG (example in Figures 1 and 2 in PReaCH paper)
    """
    ch=nx.DiGraph()
    ch.add_edges_from([('a','e'),
                       ('b','e'),('b','f'),('b','g'),
                       ('c','h'),('c','i'),
                       ('d','i'),

                       ('e','j'),
                       ('f','o'),('f','k'),
                       ('g','l'),
                       ('h','l'),
                       ('i','m'),('i','n'),

                       ('j','o'),('j','p'),
                       ('k','p'),
                       ('l','q'),
                       ('m','q'),
                      ])

    # backward topological levels (max path length to sink node)
    ch.lvl={
        'o':0,'p':0,'q':0,'n':0,
        'j':1,'k':1,'l':1,'m':1,'i':1,
        'e':2,'f':2,'g':2,'h':2,'d':2,
        'a':3,'b':3,'c':3,
    }
    # position of node in drawing of a graph in Figures 1 and 2 in the PReCH paper
    ch.pos={
        'a':(0,0),'b':(1,0),          'c':(3,0),'d':(4,0),
        'e':(0,1),'f':(1,1),'g':(2,1),'h':(3,1),'i':(4,1),
        'j':(0,2),'k':(1,2),'l':(2,2),'m':(3,2),'n':(4,2),
        'o':(0,3),'p':(1,3),          'q':(3,3),
    }
    return ch


# Cell
def commit_graph():
    """Create an example of Git commit graph

    This graph is taken from Derrick Stolee series of blog posts
    "Supercharging the Git Commit Graph".

    Positions of nodes in the drawing from `commit-graph-example.png`
    is stored in `pos` attribute of returned graph object.

    Returns
    -------
    graph : networkx.DiGraph
        An example Git commit graph (from Stolee blog post)
    """
    cg=nx.DiGraph()
    cg.add_edges_from([('A','a7'),('a7','a5'),            ('a5','a4'),('a4','a3'),('a3','a2'),('a2','a1'),('a1','b0'),
                       ('B','b7'),('b7','b6'),('b6','b5'),('b5','b4'),('b4','b3'),('b3','b2'),('b2','b1'),('b1','b0'),
                       ('B','c7'),('c7','c6'),('c6','c5'),('c5','c4'),('c4','c3'),('c3','c1'),            ('c1','b0'),
                       # short-lived branch
                       ('c6','d5'),('d5','c4'),
                       # cross-connections (merges)
                       ('a7','c6'),
                       ('b6','a5'),('a5','b4'),('b4','a3'),
                       ('b5','c4'),
                       ('c3','b2'),('b2','a1'),
                      ])

    cg.pos={'b0':(0,1),'b1':(1,1),'b2':(2,1),'b3':(3,1),'b4':(4,1),'b5':(5,1),'b6':(6,1),'b7':(7,1),'B':(8,1),
                       'a1':(1,0),'a2':(2,0),'a3':(3,0),'a4':(4,0),'a5':(5,0),           'a7':(7,0),'A':(8,0),
                       'c1':(1,2),           'c3':(3,2),'c4':(4,2),'c5':(5,2),'c6':(6,2),'c7':(7,2),
                                                                   'd5':(5,3),
           }

    return cg
