# AUTOGENERATED! DO NOT EDIT! File to edit: ../../06_levels.ipynb.

# %% auto 0
__all__ = ['find_levels']

# %% ../../06_levels.ipynb 14
import networkx as nx

# %% ../../06_levels.ipynb 16
def find_levels(DG, attr=None):
  """Find levels (generation number) of all vertices in graph G
  
  The backward topological level of a vertex v, which we denote as l_v or l(v),
  can be defined as its depth, or the length of longestt path
  to the leaf (sink) node.
  
   - if v has no immediate predecessors, then l_v = 0
   - otherwise l_v = 1 + max_{u: predecessors}(l_u)
  
  The levels / generation number information can be optionally saved in
  the graph, under given node attribute (name given by `attr` parameter).
  
  NOTE: whether for nodes without outcoming edges (without any neighbours)
  l_v is defined to be 0, or defined to be 1, is a matter of convention.
  Here the same convention as in the FELINE paper is used.
  
  NOTE: for compatibility with forward topological levels sometimes
  backward topological levels are used with negative sign applied,
  like in the PReaCH paper.
  
  Parameters:
  -----------
  DG : NetworkX DiGraph
      Directed acyclic graph.
      
  attr : str, optional (default=None)
      If set, name of a node attribute under which store vertex level.
      
  Returns:
  --------
  dict of ints
      Dictionary, where keys are node indices, and values are node levels
  """
  lvl = {}
  
  # topological levels are defined only for Directed Acyclic Graphs
  if not DG.is_directed():
    raise nx.NetworkXNotImplemented(
      "Vertex level is not defined on undirected graphs.")
  if not nx.is_directed_acyclic_graph(DG):
    raise nx.NetworkXNotImplemented(
      "Vertex level is not defined on directed graphs with loops")
  
  # it can be any post-order ordering
  nodelist = nx.dfs_postorder_nodes(DG)
  for node in nodelist:
    if DG.out_degree(node) == 0:
      lvl[node] = 0
      continue
    
    lvl[node] = max([lvl[neigh] 
                     for neigh in DG.successors(node)]) + 1
  
  if attr is not None:
    for node, level in lvl.items():
      DG.nodes[node][attr] = level
  
  return lvl
